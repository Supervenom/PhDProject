
@book{barendregt_lambda_1984,
	title = {The lambda calculus: its syntax and semantics},
	isbn = {978-0-444-86748-3},
	shorttitle = {The lambda calculus},
	abstract = {The revised edition contains a new chapter which provides an elegant description of the semantics. The various classes of lambda calculus models are described in a uniform manner. Some didactical improvements have been made to this edition. An example of a simple model is given and then the general theory (of categorical models) is developed. Indications are given of those parts of the book which can be used to form a coherent course.},
	language = {en},
	publisher = {North-Holland},
	author = {Barendregt, Hendrik Pieter},
	year = {1984},
	keywords = {Mathematics / Logic, Lambda calculus, Mathematics / Calculus, Mathematics / Reference}
}

@book{terese_term_2003,
	address = {Cambridge, UK; New York},
	title = {Term {Rewriting} {Systems}},
	isbn = {978-0-521-39115-3},
	abstract = {Term rewriting systems, which developed out of mathematical logic, consist of sequences of discrete steps where one term is replaced with another. Their many applications range from automatic theorem proving systems to computer algebra. This book begins with several examples, followed by a chapter on basic notions that provides a foundation for the rest of the work. First-order and higher-order theories are presented, with much of the latter material appearing for the first time in book form. Subjects treated include orthogonality, termination, lambda calculus and term graph rewriting. There is also a chapter detailing the required mathematical background.},
	language = {English},
	publisher = {Cambridge University Press},
	author = {Terese},
	month = apr,
	year = {2003}
}

@inproceedings{lamping_algorithm_1990,
	address = {New York, NY, USA},
	series = {{POPL} '90},
	title = {An {Algorithm} for {Optimal} {Lambda} {Calculus} {Reduction}},
	isbn = {978-0-89791-343-0},
	url = {http://doi.acm.org/10.1145/96709.96711},
	doi = {10.1145/96709.96711},
	abstract = {We present an algorithm for lambda expression reduction that avoids any copying that could later cause duplication of work. It is optimal in the sense defined by Lévy. The basis of the algorithm is a graphical representation of the kinds of commonality that can arise from substitutions; the idea can be adapted to represent other kinds of expressions besides lambda expressions. The algorithm is also well suited to parallel implementations, consisting of a fixed set of local graph rewrite rules.},
	urldate = {2018-04-26},
	booktitle = {Proceedings of the 17th {ACM} {SIGPLAN}-{SIGACT} {Symposium} on {Principles} of {Programming} {Languages}},
	publisher = {ACM},
	author = {Lamping, John},
	year = {1990},
	pages = {16--30}
}

@phdthesis{levy_reductions_1978,
	title = {Réductions correctes et optimales dans le lambda-calcul},
	school = {Université Paris 7},
	author = {Lévy, Jean-Jacques},
	month = jan,
	year = {1978}
}

@inproceedings{asperti_cost_2013,
	title = {The {Cost} of {Usage} in the ?-{Calculus}},
	shorttitle = {The {Cost} of {Usage} in the ?},
	doi = {10.1109/LICS.2013.35},
	abstract = {A new “inductive” approach to standardization for the λ-calculus has been recently introduced by Xi, allowing him to establish a double-exponential upper bound {\textbar}M{\textbar}2{\textbar}σ{\textbar} for the length of the standard reduction relative to an arbitrary reduction σ originated in M. In this paper we refine Xi's analysis, obtaining much better bounds, especially for computations producing small normal forms. For instance, for terms reducing to a boolean, we are able to prove that the length of the standard reduction is at most a mere factorial of the length of the shortest reduction sequence. The methodological innovation of our approach is that instead of counting the cost for producing something, as is customary, we count the cost of consuming things. The key observation is that the part of a λ-term that is needed to produce the normal form (or an arbitrary rigid prefix) may rapidly augment along a computation, but can only decrease very slowly (actually, linearly).},
	booktitle = {2013 28th {Annual} {ACM}/{IEEE} {Symposium} on {Logic} in {Computer} {Science}},
	author = {Asperti, A. and Lévy, J. J.},
	month = jun,
	year = {2013},
	keywords = {beta reduction, Context, double-exponential upper bound, Electronic mail, lambda calculus, Manganese, prefixes, Production, shortest reduction sequence, stability, standard reduction, standardization, Standards, Upper bound, λ-calculus},
	pages = {293--300},
	file = {IEEE Xplore Abstract Record:/home/gabriele/.zotero/zotero/fuzoq98e.default/zotero/storage/MNY7AW6B/6571561.html:text/html}
}

@article{asperti_parallel_2001,
	title = {Parallel {Beta} {Reduction} {Is} {Not} {Elementary} {Recursive}},
	volume = {170},
	issn = {0890-5401},
	url = {http://www.sciencedirect.com/science/article/pii/S089054010192869X},
	doi = {10.1006/inco.2001.2869},
	abstract = {We analyze the inherent complexity of implementing Lévy's notion of optimal evaluation for the λ-calculus, where similar redexes are contracted in one step via so-called parallel β-reduction. Optimal evaluation was finally realized by Lamping, who introduced a beautiful graph reduction technology for sharing evaluation contexts dual to the sharing of values. His pioneering insights have been modified and improved in subsequent implementations of optimal reduction. We prove that the cost of parallel β-reduction is not bounded by any Kalmár-elementary recursive function. Not only do we establish that the parallel β-step cannot be a unit-cost operation, we demonstrate that the time complexity of implementing a sequence of n parallel β-steps is not bounded as O(2n), O(22n), O(222n), or in general, O(Kl(n)), where Kl(n) is a fixed stack of l 2's with an n on top. A key insight, essential to the establishment of this non-elementary lower bound, is that any simply typed λ-term can be reduced to normal form in a number of parallel β-steps that is only polynomial in the length of the explicitly typed term. The result follows from Statman's theorem that deciding equivalence of typed λ-terms is not elementary recursive. The main theorem gives a lower bound on the work that must be done by any technology that implements Lévy's notion of optimal reduction. However, in the significant case of Lamping's solution, we make some important remarks addressing how work done by β-reduction is translated into equivalent work carried out by his bookkeeping nodes. In particular, we identify the computational paradigms of superposition of values and of higher-order sharing, appealing to compelling analogies with quantum mechanics and SIMD-parallelism.},
	number = {1},
	urldate = {2018-04-28},
	journal = {Information and Computation},
	author = {Asperti, Andrea and Mairson, Harry G.},
	month = oct,
	year = {2001},
	pages = {49--80},
	file = {ScienceDirect Full Text PDF:/home/gabriele/.zotero/zotero/fuzoq98e.default/zotero/storage/G9TCZA8W/Asperti e Mairson - 2001 - Parallel Beta Reduction Is Not Elementary Recursiv.pdf:application/pdf;ScienceDirect Snapshot:/home/gabriele/.zotero/zotero/fuzoq98e.default/zotero/storage/ADXN3YAE/S089054010192869X.html:text/html}
}

@article{asperti_optimal_2004,
	title = {({Optimal}) duplication is not elementary recursive},
	volume = {193},
	issn = {0890-5401},
	url = {http://www.sciencedirect.com/science/article/pii/S0890540104000884},
	doi = {10.1016/j.ic.2004.05.001},
	abstract = {In 1998 Asperti and Mairson proved that the cost of reducing a lambda-term using an optimal lambda-reducer (a la Lévy) cannot be bound by any elementary function in the number of shared-beta steps. We prove in this paper that an analogous result holds for Lamping’s abstract algorithm. That is, there is no elementary function in the number of shared beta steps bounding the number of duplication steps of the optimal reducer. This theorem vindicates the oracle of Lamping’s algorithm as the culprit for the negative result of Asperti and Mairson. The result is obtained using as a technical tool Elementary Affine Logic.},
	number = {1},
	urldate = {2018-04-28},
	journal = {Information and Computation},
	author = {Asperti, Andrea and Coppola, Paolo and Martini, Simone},
	month = aug,
	year = {2004},
	keywords = {Complexity, Elementary affine logic, Graph rewriting, Optimal reduction},
	pages = {21--56},
	file = {ScienceDirect Full Text PDF:/home/gabriele/.zotero/zotero/fuzoq98e.default/zotero/storage/8FTU5AN9/Asperti et al. - 2004 - (Optimal) duplication is not elementary recursive.pdf:application/pdf;ScienceDirect Snapshot:/home/gabriele/.zotero/zotero/fuzoq98e.default/zotero/storage/G9LSXQWV/S0890540104000884.html:text/html}
}

@phdthesis{kathail_optimal_1990,
	title = {Optimal {Interpreters} for lambda-calculus based functional languages},
	school = {Massachusetts Institute of Technology},
	author = {Kathail, Vinod},
	year = {1990}
}

@article{asperti_bologna_1996,
	title = {The {Bologna} {Optimal} {Higher}-{Order} {Machine}},
	volume = {6},
	issn = {1469-7653, 0956-7968},
	doi = {10.1017/S0956796800001994},
	abstract = {The Bologna Optimal Higher-order Machine (BOHM) is a prototype implementation of the core of a functional language based on (a variant of) Lamping's optimal graph reduction technique (Lamping, 1990; Gonthier et al., 1992a; Asperti, 1994). The source language is a sugared λ-calculus enriched with booleans, integers, lists and basic operations on these data types (following the guidelines of Interaction Systems – Asperti and Laneve (1993b, 1994), Laneve (1993)). In this paper, we shall describe BOHM's general architecture (comprising the garbage collector), and give a large set of benchmarks and experimental results.},
	language = {en},
	number = {6},
	urldate = {2018-04-29},
	journal = {Journal of Functional Programming},
	author = {Asperti, Andrea and Giovannetti, Cecilia and Naletto, Andrea},
	month = nov,
	year = {1996},
	pages = {763--810},
	file = {Snapshot:/home/gabriele/.zotero/zotero/fuzoq98e.default/zotero/storage/9HM9ZA5Q/1F2763B0F931680F9B15BDC750BEB343.html:text/html}
}

@article{asperti_interaction_1994,
	title = {Interaction {Systems} {I}: {The} theory of optimal reductions},
	volume = {4},
	issn = {1469-8072, 0960-1295},
	shorttitle = {Interaction {Systems} {I}},
	doi = {10.1017/S0960129500000566},
	abstract = {We introduce a new class of higher order rewriting systems, called Interaction Systems (IS's). IS's are derived from Lafont's (Intuitionistic) Interaction Nets (Lafont 1990) by dropping the linearity constraint. In particular, we borrow from Interaction Nets the syntactical bipartitions of operators into constructors and destructors and the principle of binary interaction. As a consequence, IS's are a subclass of Klop's Combinatory Reduction Systems (Klop 1980), where the Curry-Howard analogy still ‘makes sense’. Destructors and constructors, respectively, correspond to left and right logical introduction rules: interaction is cut and reduction is cut-elimination.Interaction Systems have been primarily motivated by the necessity of extending the practice of optimal evaluators for λ-calculus (Lamping 1990; Gonthier et al. 1992a) to other computational constructs such as conditionals and recursion. In this paper we focus on the theoretical aspects of optimal reductions. In particular, we generalize the family relation in Lévy (1978; 1980), thus defining the amount of sharing an optimal evaluator is required to perform. We reinforce our notion of family by approaching it in two different ways (generalizing labelling and extraction in Levy (1980)) and proving their coincidence. The reader is referred to Asperti and Laneve (1993c) for the paradigmatic description of optimal evaluators of IS's.},
	language = {en},
	number = {4},
	urldate = {2018-04-29},
	journal = {Mathematical Structures in Computer Science},
	author = {Asperti, Andrea and Laneve, Cosimo},
	month = dec,
	year = {1994},
	pages = {457--504},
	file = {Snapshot:/home/gabriele/.zotero/zotero/fuzoq98e.default/zotero/storage/Z754A5UU/CADB22B6E534BEE8411CADF0E8593843.html:text/html}
}

@article{asperti_interaction_1996,
	title = {Interaction systems {II}: {The} practice of optimal reductions},
	volume = {159},
	issn = {0304-3975},
	shorttitle = {Interaction systems {II}},
	doi = {10.1016/0304-3975(95)00062-3},
	abstract = {Lamping's optimal graph reduction technique for the λ-calculus is generalized to a new class of higher-order rewriting systems, called Interaction Systems. Interaction Systems provide a nice integration of the functional paradigm with a rich class of data structures (all inductive types), and some basic control flow constructs such as conditionals and (primitive or general) recursion. We describe a uniform and optimal implementation, in Lamping's style, for all these features. The paper is the natural continuation of [3], where we focused on the theoretical aspects of optimal reductions in Interaction Systems (family relation, labeling, extraction).},
	number = {2},
	urldate = {2018-04-29},
	journal = {Theoretical Computer Science},
	author = {Asperti, Andrea and Laneve, Cosimo},
	month = jun,
	year = {1996},
	pages = {191--244},
	file = {ScienceDirect Full Text PDF:/home/gabriele/.zotero/zotero/fuzoq98e.default/zotero/storage/AWGCW5I4/Asperti e Laneve - 1996 - Interaction systems II The practice of optimal re.pdf:application/pdf;ScienceDirect Snapshot:/home/gabriele/.zotero/zotero/fuzoq98e.default/zotero/storage/4J7PIAXS/0304397595000623.html:text/html}
}

@book{asperti_optimal_1998,
	address = {New York, NY, USA},
	title = {The {Optimal} {Implementation} of {Functional} {Programming} {Languages}},
	isbn = {978-0-521-62112-0},
	publisher = {Cambridge University Press},
	author = {Asperti, Andrea and Guerrini, Stefano},
	year = {1998}
}

@article{asperti_linear_1995,
	title = {Linear {Logic}, {Comonads} {And} {Optimal} {Reductions}},
	volume = {22},
	issn = {0169-2968},
	abstract = {The paper discusses, in a categorical perspective, some recent works on optimal graph reduction techniques for the λ-calculus. In particular, we relate the two “brackets” in [GAL92a] to the two operations associated with the comonad “!” of Linear Logic. The rewriting rules can be then understood as a “local implementation” of naturality laws, that is as the broadcasting of some information from the output to the inputs of a term, following its connected structure.},
	number = {1,2},
	urldate = {2018-04-30},
	journal = {Fundam. Inf.},
	author = {Asperti, Andrea},
	month = apr,
	year = {1995},
	pages = {3--22}
}

@inproceedings{gonthier_geometry_1992,
	address = {New York, NY, USA},
	series = {{POPL} '92},
	title = {The {Geometry} of {Optimal} {Lambda} {Reduction}},
	isbn = {978-0-89791-453-6},
	url = {http://doi.acm.org/10.1145/143165.143172},
	doi = {10.1145/143165.143172},
	abstract = {Lamping discovered an optimal graph-reduction implementation of the \&lgr;-calculus. Simultaneously, Girard invented the geometry of interaction, a mathematical foundation for operational semantics. In this paper, we connect and explain the geometry of interaction and Lamping's graphs. The geometry of interaction provides a suitable semantic basis for explaining and improving Lamping's system. On the other hand, graphs similar to Lamping's provide a concrete representation of the geometry of interaction. Together, they offer a new understanding of computation, as well as ideas for efficient and correct implementations.},
	urldate = {2018-04-30},
	booktitle = {Proceedings of the 19th {ACM} {SIGPLAN}-{SIGACT} {Symposium} on {Principles} of {Programming} {Languages}},
	publisher = {ACM},
	author = {Gonthier, Georges and Abadi, Martín and Lévy, Jean-Jacques},
	year = {1992},
	pages = {15--26}
}

@inproceedings{gonthier_linear_1992,
	title = {Linear logic without boxes},
	doi = {10.1109/LICS.1992.185535},
	abstract = {J.-Y. Girard's original definition of proof nets for linear logic involves boxes. The box is the unit for erasing and duplicating fragments of proof nets. It imposes synchronization, limits sharing, and impedes a completely local view of computation. The authors describe an implementation of proof nets without boxes. Proof nets are translated into graphs of the sort used in optimal λ-calculus implementations; computation is performed by simple graph rewriting. This graph implementation helps in understanding optimal reductions in the λ-calculus and in the various programming languages inspired by linear logic},
	booktitle = {[1992] {Proceedings} of the {Seventh} {Annual} {IEEE} {Symposium} on {Logic} in {Computer} {Science}},
	author = {Gonthier, G. and Abadi, M. and Levy, J. J.},
	month = jun,
	year = {1992},
	keywords = {Computational modeling, Calculus, Concrete, Encoding, formal logic, Geometry, graph implementation, graph rewriting, Impedance, lambda -calculus, linear logic, Linear programming, Logic programming, Parallel processing, proof nets, rewriting systems, theorem proving},
	pages = {223--234},
	file = {IEEE Xplore Abstract Record:/home/gabriele/.zotero/zotero/fuzoq98e.default/zotero/storage/68LRWK4H/185535.html:text/html}
}

@article{girard_linear_1987,
	title = {Linear logic},
	volume = {50},
	issn = {0304-3975},
	url = {http://www.sciencedirect.com/science/article/pii/0304397587900454},
	doi = {10.1016/0304-3975(87)90045-4},
	abstract = {The familiar connective of negation is broken into two operations: linear negation which is the purely negative part of negation and the modality “of course” which has the meaning of a reaffirmation. Following this basic discovery, a completely new approach to the whole area between constructive logics and programmation is initiated.},
	number = {1},
	urldate = {2018-05-01},
	journal = {Theoretical Computer Science},
	author = {Girard, Jean-Yves},
	month = jan,
	year = {1987},
	pages = {1--101},
	file = {ScienceDirect Full Text PDF:/home/gabriele/.zotero/zotero/fuzoq98e.default/zotero/storage/UBUVI3EX/Girard - 1987 - Linear logic.pdf:application/pdf;ScienceDirect Snapshot:/home/gabriele/.zotero/zotero/fuzoq98e.default/zotero/storage/3FVDMBUN/0304397587900454.html:text/html}
}

@incollection{girard_geometry_1989,
	series = {Logic {Colloquium} '88},
	title = {Geometry of {Interaction} 1: {Interpretation} of {System} {F}},
	volume = {127},
	shorttitle = {Geometry of {Interaction} 1},
	url = {http://www.sciencedirect.com/science/article/pii/S0049237X08702714},
	abstract = {This chapter describes the development of a semantics of computation free from the twin drawbacks of reductionism (that leads to static modification) and subjectivism (that leads to syntactical abuses, in other terms, bureaucracy). The new approach initiated in this chapter rests on the use of a specific C*-algebra Λ* that has the distinguished property of bearing a (non associative) inner tensor product. The chapter describes that a representative class of algorithms can be modelized by means of standard mathematics.},
	urldate = {2018-05-01},
	booktitle = {Studies in {Logic} and the {Foundations} of {Mathematics}},
	publisher = {Elsevier},
	author = {Girard, Jean-Yves},
	editor = {Ferro, R. and Bonotto, C. and Valentini, S. and Zanardo, A.},
	month = jan,
	year = {1989},
	doi = {10.1016/S0049-237X(08)70271-4},
	pages = {221--260},
	file = {ScienceDirect Snapshot:/home/gabriele/.zotero/zotero/fuzoq98e.default/zotero/storage/IMIC2WS6/S0049237X08702714.html:text/html}
}

@article{danos_reversible_1999,
	title = {Reversible, irreversible and optimal {\textbackslash}lambda-machines},
	volume = {227},
	issn = {0304-3975},
	doi = {10.1016/S0304-3975(99)00049-3},
	abstract = {Lambda-calculus is the core of functional programming, and many different ways to evaluate lambda-terms have been considered. One of the nicest, from the theoretical point of view, is head linear reduction. We compare two ways of implementing that specific evaluation strategy: “Krivine's abstract machine” and the “interaction abstract machine”. Runs on those machines stand in a relation which can be accurately described using the call/return symmetry discovered by Asperti and Laneve.},
	number = {1},
	urldate = {2018-05-03},
	journal = {Theoretical Computer Science},
	author = {Danos, Vincent and Regnier, Laurent},
	month = sep,
	year = {1999},
	keywords = {-calculus, Abstract machines, Geometry of interaction, Linear head reduction, Linear logic, Reversible computations},
	pages = {79--97},
	file = {ScienceDirect Full Text PDF:/home/gabriele/.zotero/zotero/fuzoq98e.default/zotero/storage/QYPQC3RB/Danos e Regnier - 1999 - Reversible, irreversible and optimal λ-machines.pdf:application/pdf;ScienceDirect Snapshot:/home/gabriele/.zotero/zotero/fuzoq98e.default/zotero/storage/VLEYFCTU/S0304397599000493.html:text/html}
}

@book{hennessy_computer_2011,
	address = {San Francisco, CA, USA},
	edition = {5th},
	title = {Computer {Architecture}, {Fifth} {Edition}: {A} {Quantitative} {Approach}},
	isbn = {978-0-12-383872-8},
	shorttitle = {Computer {Architecture}},
	abstract = {The computing world today is in the middle of a revolution: mobile clients and cloud computing have emerged as the dominant paradigms driving programming and hardware innovation today. The Fifth Edition of Computer Architecture focuses on this dramatic shift, exploring the ways in which software and technology in the "cloud" are accessed by cell phones, tablets, laptops, and other mobile computing devices. Each chapter includes two real-world examples, one mobile and one datacenter, to illustrate this revolutionary change. Updated to cover the mobile computing revolutionEmphasizes the two most important topics in architecture today: memory hierarchy and parallelism in all its forms.Develops common themes throughout each chapter: power, performance, cost, dependability, protection, programming models, and emerging trends ("What's Next")Includes three review appendices in the printed text. Additional reference appendices are available online.Includes updated Case Studies and completely new exercises.},
	publisher = {Morgan Kaufmann Publishers Inc.},
	author = {Hennessy, John L. and Patterson, David A.},
	year = {2011}
}

@article{muroya_dynamic_2018,
	title = {The {Dynamic} {Geometry} of {Interaction} {Machine}: {A} {Token}-{Guided} {Graph} {Rewriter}},
	shorttitle = {The {Dynamic} {Geometry} of {Interaction} {Machine}},
	abstract = {In implementing evaluation strategies of the lambda-calculus, both correctness and efficiency of implementation are valid concerns. While the notion of correctness is determined by the evaluation strategy, regarding efficiency there is a larger design space that can be explored, in particular the trade-off between space versus time efficiency. We contribute to the study of this trade-off by the introduction of an abstract machine, inspired by Girard's Geometry of Interaction (GoI), a machine combining token passing and graph rewriting. We show soundness and completeness of our abstract machine, called the {\textbackslash}emph\{Dynamic GoI Machine\} (DGoIM), with respect to three evaluations: call-by-need, left-to-right call-by-value, and right-to-left call-by-value. Analysing time cost of its execution classifies the machine as "efficient" in Accattoli's taxonomy of abstract machines.},
	urldate = {2018-05-03},
	journal = {arXiv:1803.00427 [cs]},
	author = {Muroya, Koko and Ghica, Dan R.},
	month = feb,
	year = {2018},
	keywords = {Computer Science - Logic in Computer Science, Computer Science - Programming Languages},
	file = {arXiv\:1803.00427 PDF:/home/gabriele/.zotero/zotero/fuzoq98e.default/zotero/storage/4787R6C9/Muroya e Ghica - 2018 - The Dynamic Geometry of Interaction Machine A Tok.pdf:application/pdf;arXiv.org Snapshot:/home/gabriele/.zotero/zotero/fuzoq98e.default/zotero/storage/T7HV23EE/1803.html:text/html}
}

@article{accattoli_leftmost-outermost_2016,
	title = {({Leftmost}-{Outermost}) {Beta} {Reduction} is {Invariant}, {Indeed}},
	volume = {Volume 12, Issue 1},
	url = {https://lmcs.episciences.org/1627/pdf},
	abstract = {Slot and van Emde Boas' weak invariance thesis states that reasonable machines can simulate each other within a polynomially overhead in time. Is lambda-calculus a reasonable machine? Is there a way to measure the computational complexity of a lambda-term? This paper presents the first complete positive answer to this long-standing problem. Moreover, our answer is completely machine-independent and based over a standard notion in the theory of lambda-calculus: the length of a leftmost-outermost derivation to normal form is an invariant cost model. Such a theorem cannot be proved by directly relating lambda-calculus with Turing machines or random access machines, because of the size explosion problem: there are terms that in a linear number of steps produce an exponentially long output. The first step towards the solution is to shift to a notion of evaluation for which the length and the size of the output are linearly related. This is done by adopting the linear substitution calculus (LSC), a calculus of explicit substitutions modeled after linear logic proof nets and admitting a decomposition of leftmost-outermost derivations with the desired property. Thus, the LSC is invariant with respect to, say, random access machines. The second step is to show that LSC is invariant with respect to the lambda-calculus. The size explosion problem seems to imply that this is not possible: having the same notions of normal form, evaluation in the LSC is exponentially longer than in the lambda-calculus. We solve such an impasse by introducing a new form of shared normal form and shared reduction, deemed useful. Useful evaluation avoids those steps that only unshare the output without contributing to beta-redexes, i.e. the steps that cause the blow-up in size. The main technical contribution of the paper is indeed the definition of useful reductions and the thorough analysis of their properties.},
	language = {en},
	urldate = {2018-05-02},
	journal = {Logical Methods in Computer Science},
	author = {Accattoli, Beniamino and Dal Lago, Ugo},
	month = mar,
	year = {2016},
	file = {Full Text PDF:/home/gabriele/.zotero/zotero/fuzoq98e.default/zotero/storage/HJEMLXUF/Lago e Accattoli - 2016 - (Leftmost-Outermost) Beta Reduction is Invariant, .pdf:application/pdf;Snapshot:/home/gabriele/.zotero/zotero/fuzoq98e.default/zotero/storage/RHNM64UR/1627.html:text/html}
}

@inproceedings{mackie_geometry_1995,
	address = {New York, NY, USA},
	series = {{POPL} '95},
	title = {The {Geometry} of {Interaction} {Machine}},
	isbn = {978-0-89791-692-9},
	url = {http://doi.acm.org/10.1145/199448.199483},
	doi = {10.1145/199448.199483},
	abstract = {We investigate implementation techniques arising directly from Girard's Geometry of Interaction semantics for Linear Logic, specifically for a simple functional programming language (PCF). This gives rise to a very simple, compact, compilation schema and run-time system. We analyse various properties of this kind of computation that suggest substantial optimisations that could make this paradigm of implementation not only practical, but potentially more efficient than extant paradigms.},
	urldate = {2018-05-02},
	booktitle = {Proceedings of the 22Nd {ACM} {SIGPLAN}-{SIGACT} {Symposium} on {Principles} of {Programming} {Languages}},
	publisher = {ACM},
	author = {Mackie, Ian},
	year = {1995},
	pages = {198--208},
	file = {ACM Full Text PDF:/home/gabriele/.zotero/zotero/fuzoq98e.default/zotero/storage/KMZBXPFD/Mackie - 1995 - The Geometry of Interaction Machine.pdf:application/pdf}
}

@article{asperti_about_2017,
	title = {About the efficient reduction of lambda terms},
	abstract = {There is still a lot of confusion about "optimal" sharing in the lambda calculus, and its actual efficiency. In this article, we shall try to clarify some of these issues.},
	urldate = {2018-05-02},
	journal = {arXiv:1701.04240 [cs]},
	author = {Asperti, Andrea},
	month = jan,
	year = {2017},
	keywords = {Computer Science - Logic in Computer Science},
	file = {arXiv\:1701.04240 PDF:/home/gabriele/.zotero/zotero/fuzoq98e.default/zotero/storage/AQWRZCVF/Asperti - 2017 - About the efficient reduction of lambda terms.pdf:application/pdf;arXiv.org Snapshot:/home/gabriele/.zotero/zotero/fuzoq98e.default/zotero/storage/8YUS5LDF/1701.html:text/html}
}

@inproceedings{guerrini_is_2017,
	address = {Dagstuhl, Germany},
	series = {Leibniz {International} {Proceedings} in {Informatics} ({LIPIcs})},
	title = {Is the {Optimal} {Implementation} {Inefficient}? {Elementarily} {Not}},
	volume = {84},
	isbn = {978-3-95977-047-7},
	doi = {10.4230/LIPIcs.FSCD.2017.17},
	urldate = {2018-05-02},
	booktitle = {2nd {International} {Conference} on {Formal} {Structures} for {Computation} and {Deduction} ({FSCD} 2017)},
	publisher = {Schloss Dagstuhl–Leibniz-Zentrum fuer Informatik},
	author = {Guerrini, Stefano and Solieri, Marco},
	editor = {Miller, Dale},
	year = {2017},
	keywords = {linear logic, proof nets, complexity, lambda-calculus, optimality, sharing graphs},
	pages = {17:1--17:16},
	file = {Full Text PDF:/home/gabriele/.zotero/zotero/fuzoq98e.default/zotero/storage/64CCQQMV/Guerrini e Solieri - 2017 - Is the Optimal Implementation Inefficientl Element.pdf:application/pdf;Snapshot:/home/gabriele/.zotero/zotero/fuzoq98e.default/zotero/storage/CB3Q2MXE/7733.html:text/html}
}

@article{baillot_light_2011,
	title = {Light logics and optimal reduction: {Completeness} and complexity},
	volume = {209},
	issn = {0890-5401},
	shorttitle = {Light logics and optimal reduction},
	url = {http://www.sciencedirect.com/science/article/pii/S0890540110001604},
	doi = {10.1016/j.ic.2010.10.002},
	abstract = {Typing of lambda-terms in elementary and light affine logic (EAL and LAL, respectively) has been studied for two different reasons: on the one hand the evaluation of typed terms using LAL (EAL, respectively) proof-nets admits a guaranteed polynomial (elementary, respectively) bound; on the other hand these terms can also be evaluated by optimal reduction using the abstract version of Lamping’s algorithm. The first reduction is global while the second one is local and asynchronous. We prove that for LAL (EAL, respectively) typed terms, Lamping’s abstract algorithm also admits a polynomial (elementary, respectively) bound. We also give a proof of its soundness and completeness (for EAL and LAL with type fixpoints), by using a simple geometry of interaction model (context semantics).},
	number = {2},
	urldate = {2018-05-02},
	journal = {Information and Computation},
	author = {Baillot, Patrick and Coppola, Paolo and Dal Lago, Ugo},
	month = feb,
	year = {2011},
	keywords = {Lambda calculus, Optimal reduction, Linear logic, Implicit computational complexity, Light linear logic, Proof-nets},
	pages = {118--142},
	file = {ScienceDirect Full Text PDF:/home/gabriele/.zotero/zotero/fuzoq98e.default/zotero/storage/JYD3FN9Q/Baillot et al. - 2011 - Light logics and optimal reduction Completeness a.pdf:application/pdf;ScienceDirect Snapshot:/home/gabriele/.zotero/zotero/fuzoq98e.default/zotero/storage/EZSWHN68/S0890540110001604.html:text/html}
}

@inproceedings{lawall_optimality_1996,
	address = {New York, NY, USA},
	series = {{ICFP} '96},
	title = {Optimality and {Inefficiency}: {What} {Isn}'{T} a {Cost} {Model} of the {Lambda} {Calculus}?},
	isbn = {978-0-89791-770-4},
	shorttitle = {Optimality and {Inefficiency}},
	url = {http://doi.acm.org/10.1145/232627.232639},
	doi = {10.1145/232627.232639},
	abstract = {We investigate the computational efficiency of the sharing graphs of Lamping [Lam90], Gonthier, Abadi, and L\&eacute;vy [GAL92], and Asperti [Asp94], designed to effect so-called optimal evaluation, with the goal of reconciling optimality, efficiency, and the clarification of reasonable cost models for the \&lambda;-calculus. Do these graphs suggest reasonable cost models for the \&lambda;-calculus? If they are optimal, are they efficient?We present a brief survey of these optimal evaluators, identifying their common characteristics, as well as their shared failures. We give a lower bound on the efficiency of sharing graphs by identifying a class of \&lambda;-terms that are normalizable in \&Theta;(n) time, and require \&Theta;(n) "fan interactions," but require \&Omega;(2n) bookkeeping steps. For [GAL92], we analyze this anomaly in terms of the dynamic maintenance of deBruijn indices for intermediate terms. We give another lower bound showing that sharing graphs can do \&Omega;(2n) work (via fan interactions) on graphs that have no \&beta;-redexes. Finally, we criticize a proposed cost model for \&lambda;-calculus given by Frandsen and Sturtivant [FS91], showing by example that the model does not take account of the size of intermediate forms. Our example is a term requiring \&Theta;(2n) steps while having proposed cost \&Theta;(n). We propose some cost models that both reflect this parameter, and simultaneously reconcile key concepts from optimal reduction.},
	urldate = {2018-05-02},
	booktitle = {Proceedings of the {First} {ACM} {SIGPLAN} {International} {Conference} on {Functional} {Programming}},
	publisher = {ACM},
	author = {Lawall, Julia L. and Mairson, Harry G.},
	year = {1996},
	pages = {92--101},
	file = {ACM Full Text PDF:/home/gabriele/.zotero/zotero/fuzoq98e.default/zotero/storage/WJDSE6A3/Lawall e Mairson - 1996 - Optimality and Inefficiency What Isn'T a Cost Mod.pdf:application/pdf}
}

@article{hartmanis_computational_1965,
	title = {On the {Computational} {Complexity} of {Algorithms}},
	volume = {117},
	issn = {0002-9947},
	url = {http://www.jstor.org/stable/1994208},
	doi = {10.2307/1994208},
	urldate = {2018-05-02},
	journal = {Transactions of the American Mathematical Society},
	author = {Hartmanis, J. and Stearns, R. E.},
	year = {1965},
	pages = {285--306}
}

@unpublished{van_oostrom_lambdascope._2010,
	title = {Lambdascope. {Another} optimal implementation of the lambda-calculus},
	url = {http://citeseerx.ist.psu.edu/viewdoc/versions?doi=10.1.1.109.3616},
	abstract = {An optimal implementation of the λβ-calculus into interaction nets, featuring 1. only a single type of scope node, 2. a completely reduction based read-back, and 3. only three reduction rule schemes.},
	urldate = {2018-05-06},
	author = {van Oostrom, Vincent and van de Looij, Kees-Jan and Zwitserlood, Marijn},
	year = {2010},
	note = {http://citeseerx.ist.psu.edu/viewdoc/versions?doi=10.1.1.109.3616},
	file = {Snapshot:/home/gabriele/.zotero/zotero/fuzoq98e.default/zotero/storage/85VFPNRW/61042374787bf6514706b49a5a4f0b74996979a0.html:text/html}
}

@inproceedings{guerrini_coherence_1996,
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Coherence for sharing proof nets},
	isbn = {978-3-540-61464-7 978-3-540-68596-8},
	url = {https://link.springer.com/chapter/10.1007/3-540-61464-8_54},
	doi = {10.1007/3-540-61464-8_54},
	abstract = {Sharing graphs are a way of representing linear logic proof-nets in such a way that their reduction never duplicates a redex. In their usual presentations, they present a problem of coherence: if the proof-net N reduces by standard cut-elimination to N′, then, by reducing the sharing graph of N we do not obtain the sharing graph of N′. We solve this problem by changing the way the information is coded into sharing graphs and introducing a new reduction rule (absorption). The rewriting system is confluent and terminating.},
	language = {en},
	urldate = {2018-05-09},
	booktitle = {Rewriting {Techniques} and {Applications}},
	publisher = {Springer, Berlin, Heidelberg},
	author = {Guerrini, S. and Martini, S. and Masini, A.},
	month = jul,
	year = {1996},
	pages = {215--229},
	file = {Snapshot:/home/gabriele/.zotero/zotero/fuzoq98e.default/zotero/storage/NCYQGKQM/10.html:text/html}
}